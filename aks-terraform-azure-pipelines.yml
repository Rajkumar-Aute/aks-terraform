
trigger: none
# - main

pool:
  vmImage: ubuntu-latest

variables:
- name: dev-env
  value: dev
- name: qa-env
  value: qa
stages:
  - stage: TerraformValidate
    jobs:
      - job: TerraformValidateJob
        continueOnError: false
        steps:
          - task: PublishBuildArtifacts@1
            inputs:
              TargetPath: '$(System.DefaultWorkingDirectory)/terraform-files'
              ArtifactName: 'terraform-files-out'
              publishLocation: 'pipeline'
          - task: TerraformInstaller@0
            displayName: Terraform install
            inputs:
              terraformVersion: 'latest'
          - task: TerraformCLI@0
            displayName: Terraform init
            inputs:
              command: 'init'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-files'
              backendType: 'azurerm'
              backendServiceArm: 'aks-terraform-svc-con'
              backendAzureRmSubscriptionId: 'bedd05d0-ed0c-45f5-9fe1-fc38a22ead10'
              backendAzureRmResourceGroupName: 'tfstateraj'
              backendAzureRmStorageAccountName: 'tfstateraj'
              backendAzureRmContainerName: 'tfstateraj'
              backendAzureRmKey: 'aks-terraform.tfstate'
              allowTelemetryCollection: false
          - task: TerraformCLI@0
            displayName: Terraform Validate
            inputs:
              command: validate
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-files'
              allowTelemetryCollection: false


  - stage: DeployAKSCluster
    jobs:
      - deployment: DeployAKSCluster
        displayName: DeployAKSCluster
        pool:
          vmImage: 'ubuntu-latest'
        environment: $(dev-env)
        strategy:
         runOnce:
           deploy:
             steps:          
              - task: DownloadSecureFile@1
                displayName: download ssh key
                name: sshkey
                inputs:
                  secureFile: 'aks.pub'
              

              
              - task: TerraformCLI@0
                displayName: Terraform init
                inputs:
                  command: 'init'
                  workingDirectory: '$(Pipeline.Workspace)/terraform-files-out'
                  backendType: 'azurerm'
                  backendServiceArm: 'aks-terraform-svc-con'
                  #backendAzureRmSubscriptionId: 'bedd05d0-ed0c-45f5-9fe1-fc38a22ead10'
                  backendAzureRmResourceGroupName: 'tfstateraj'
                  backendAzureRmStorageAccountName: 'tfstateraj'
                  backendAzureRmContainerName: 'tfstateraj'
                  backendAzureRmKey: 'aks-$(dev-env).tfstate'
                  allowTelemetryCollection: false
              - task: TerraformCLI@0
                displayName: terraform plan
                inputs:
                  command: 'plan'
                  environmentServiceName: 'aks-terraform-svc-con'
                  workingDirectory: '$(Pipeline.Workspace)/terraform-files-out'
                  commandOptions: '-var ssh_public_key=$(sshkey.secureFilePath) -var environment=$(dev-env) -out $(Pipeline.Workspace)/terraform-files-out/$(dev-env)-$(Build.BuildId).out'
                  allowTelemetryCollection: false
              - task: TerraformCLI@0
                displayName: terraform apply
                inputs:
                  command: 'apply'
                  workingDirectory: '$(Pipeline.Workspace)/terraform-files-out'
                  environmentServiceName: 'aks-terraform-svc-con'
                  commandOptions: '$(Pipeline.Workspace)/terraform-files-out/$(dev-env)-$(Build.BuildId).out'
                  allowTelemetryCollection: false